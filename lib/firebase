import { initializeApp } from "firebase/app";
import { getFirestore, doc, setDoc } from "firebase/firestore";

// ðŸ“Œ Remplace avec TES clÃ©s Firebase (assure-toi que les variables dâ€™environnement sont bien dÃ©finies)
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
};

// ðŸ”¹ Initialise Firebase AVANT d'utiliser Firestore
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// ðŸ”¹ Correction : s'assurer que les donnÃ©es sont valides avant d'Ã©crire dans Firestore
const saveRangeToFirebase = async (rangeId, rangeName, blinds, heroPosition, spot, villainPosition, handColors) => {
  if (!rangeId) {
    console.error("ðŸš¨ Aucun ID de range, impossible d'enregistrer !");
    return;
  }

  // VÃ©rifier que handColors est bien un objet
  const safeHandColors = handColors && typeof handColors === "object" ? handColors : {};

  try {
    const docRef = doc(db, "ranges", rangeId);
    await setDoc(docRef, {
      rangeName: rangeName || "Sans Nom",
      blinds,
      heroPosition,
      spot,
      villainPosition,
      handColors: safeHandColors // âœ… Toujours un objet, jamais undefined
    }, { merge: true });

    console.log("âœ… Range mise Ã  jour !");
  } catch (error) {
    console.error("ðŸš¨ Erreur lors de la sauvegarde :", error);
  }
};

export { db, saveRangeToFirebase };
