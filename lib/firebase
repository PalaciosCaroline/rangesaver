import { initializeApp } from "firebase/app";
import { getFirestore, doc, setDoc, getDoc } from "firebase/firestore";
import { getAuth } from "firebase/auth";

// 📌 Vérification des variables d’environnement Firebase
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
};

// 🔹 Initialise Firebase AVANT d'utiliser Firestore
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

// 🔹 Fonction pour sauvegarder les ranges
const saveRangeToFirebase = async (rangeId, rangeName, blinds, heroPosition, spot, villainPosition, handColors) => {
  console.log("🔍 Données avant validation :", {
    rangeId, rangeName, blinds, heroPosition, spot, villainPosition, handColors
  });

  if (!heroPosition || !spot) {
    console.error("🚨 Position du héros ou spot manquant !");
    return;
  }

  try {
    const docRef = doc(db, "ranges", rangeId);
    await setDoc(docRef, {
      rangeName: rangeName || "Sans Nom",
      blinds,
      heroPosition,
      spot,
      villainPosition: villainPosition || "", 
      handColors: handColors || {}
    }, { merge: true });

    console.log("✅ Range enregistrée avec succès !");
  } catch (error) {
    console.error("🚨 Erreur lors de la sauvegarde :", error);
  }
};

export { db, saveRangeToFirebase, getDoc, auth };

