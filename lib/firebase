import { getAuth } from "firebase/auth"; // ✅ Ajout de getAuth
import { initializeApp } from "firebase/app";
import { getFirestore, collection, getDocs, doc, setDoc, getDoc, query, where } from "firebase/firestore";


// 📌 Vérification des variables d’environnement Firebase
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
};


// 🔥 Initialisation Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app)
const db = getFirestore(app);

/**
 * Enregistre une range dans Firestore
 * @param {string} rangeId - Identifiant unique de la range
 * @param {string} context - Contexte du jeu (ex: MTT, Cash Game, etc.)
 * @param {string | number} blinds - Valeur des blinds (ex: 20)
 * @param {number} numSeats - Nombre de sièges à la table (ex: 6, 8, 9)
 * @param {string} heroPosition - Position du Héros à la table (ex: "CO", "BTN")
 * @param {string} spot - Type de spot joué (ex: "Open", "3bet", "Overcall & Squeeze")
 * @param {string} villainPosition - Position du Villain si applicable, sinon vide
 * @param {object} handColors - Actions prises pour chaque main sous forme { "AA": "raise", "AKs": "call" }
 * @param {string} rangeDescrition - Description de la range
 */
export async function saveRangeToFirebase(
  rangeId,
  context,
  rangeDescription,
  blinds,
  numSeats,
  heroPosition,
  spot,
  villainPosition,
  handColors
) {
  try {
    const auth = getAuth();
    const user = auth.currentUser;
    
    if (!user) {
      console.error("🚨 Erreur : Aucun utilisateur connecté !");
      return;
    }

    const rangeRef = doc(db, "ranges", rangeId);

    const rangeData = {
      userId: user.uid, // ✅ Associe l'UID de l'utilisateur à la range
      context: context || "MTT",
      blinds,
      numSeats: numSeats || 6,
      heroPosition: heroPosition || "CO",
      spot: spot || "Open",
      villainPosition: spot === "Open" ? "Aucun" : villainPosition,
      rangeDescription: rangeDescription || "",
      handColors: handColors || {},
      timestamp: new Date().toISOString(),
    };

    await setDoc(rangeRef, rangeData);
    console.log("Range enregistrée avec succès :", rangeId);
  } catch (error) {
    console.error("Erreur lors de l'enregistrement de la range :", error);
  }
}

/**
 * Récupère une range depuis Firestore
 * @param {string} rangeId - Identifiant unique de la range
 * @returns {object|null} - Les données de la range ou null si elle n'existe pas
 */
export async function getRangeData(rangeId) {
  try {
    const auth = getAuth();
    const user = auth.currentUser;

    if (!user) {
      console.error("Erreur : Aucun utilisateur connecté !");
      return null;
    }

    const rangeRef = doc(db, "ranges", rangeId);
    const docSnap = await getDoc(rangeRef);

    if (!docSnap.exists()) {
      console.log("❌ Aucune range trouvée pour l'ID :", rangeId);
      return null;
    }

    const rangeData = docSnap.data();

    if (rangeData.userId !== user.uid) {
      console.warn("Accès refusé : Cette range ne vous appartient pas !");
      return null;
    }

    console.log("Données récupérées depuis Firebase :", rangeData);
    return rangeData;
  } catch (error) {
    console.error("Erreur lors de la récupération de la range :", error);
    return null;
  }
}

/**
 * Récupère toutes les ranges stockées dans Firebase
 * @returns {Array} - Tableau des ranges { id, rangeName }
 */
export async function getAllRanges() {
  try {
    const auth = getAuth();
    const user = auth.currentUser;

    if (!user) {
      console.error("Erreur : Aucun utilisateur connecté !");
      return [];
    }

    const rangesRef = collection(db, "ranges");
    const q = query(rangesRef, where("userId", "==", user.uid)); // Filtre les ranges de l'utilisateur

    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("Erreur lors de la récupération des ranges :", error);
    return [];
  }
}

/**
 * 📌 Récupère les ranges d'un utilisateur donné
 * @param {string} userId - ID Firebase de l'utilisateur
 * @returns {Promise<Array>} - Tableau des ranges de l'utilisateur
 */
export async function getUserRanges(userId) {
  try {
    const rangesRef = collection(db, "ranges");
    const q = query(rangesRef, where("userId", "==", userId)); // 🔥 Filtre par utilisateur
    const querySnapshot = await getDocs(q);

    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("🚨 Erreur lors de la récupération des ranges :", error);
    return [];
  }
}


export { auth,db };
